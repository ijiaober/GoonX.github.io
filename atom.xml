<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[GoonX]]></title>
  <subtitle><![CDATA[我走的很慢，但我从不后退。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://ijiaober.github.io/"/>
  <updated>2014-08-14T03:05:40.328Z</updated>
  <id>http://ijiaober.github.io/</id>
  
  <author>
    <name><![CDATA[ijiaober]]></name>
    <email><![CDATA[ijiaober@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[laravel的语言包设置]]></title>
    <link href="http://ijiaober.github.io/2014/08/13/laravel/laravel-lang/"/>
    <id>http://ijiaober.github.io/2014/08/13/laravel/laravel-lang/</id>
    <published>2014-08-13T09:44:48.000Z</published>
    <updated>2014-08-14T02:39:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Laravel_本地化语言的功能">Laravel 本地化语言的功能</h2>
<p>所谓本地化语言,就是说在不同的的国家可能使用不同的语言.现在Laravel提供了一个方便的功能,本地化语言支持。</p>
<p>好了,下面让我们来看看如何使用这个神奇的功能吧。</p>
<p>这里本地化语言使用的是<code>Lang</code>这个类。</p>
<p>例如，我们想要让程序支持中文和英文。</p>
<a id="more"></a>

<h3 id="第一步:建立语言包文件">第一步:建立语言包文件</h3>
<p>在app目录下有个lang的文件夹,里面默认有个<code>en</code>的文件夹,这个表示的是英文。</p>
<p>我们再在里面建立一个<code>zh-CN</code>的文件夹,表示中文。</p>
<p>所有对应的中英文语言文件都应该分别在各自的文件夹里。</p>
<p>我们现在做个简单的实例，想要的效果是在页面里：</p>
<p>中国的用户显示 : “你好!”</p>
<p>其他的用户显示:”Hello!”</p>
<p>我们在<code>en</code>和<code>zh-CN</code>里面建立都一个叫做<code>hello.php</code></p>
<p><code>en/hello.php</code> 里这样写:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</div><div class="line"></div><div class="line">  <span class="string">"welcome"</span> =&gt;<span class="string">"hello!"</span></div><div class="line"></div><div class="line">);</div></pre></td></tr></table></figure>

<p><code>zh/hello.php</code>里这样写:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</div><div class="line"></div><div class="line">  <span class="string">"welcome"</span> =&gt;<span class="string">"你好!"</span></div><div class="line"></div><div class="line">);</div></pre></td></tr></table></figure>

<p>好了,这就是我们第一步要建立的语言包文件。</p>
<h3 id="第二步:修改语言配置">第二步:修改语言配置</h3>
<p>我们在我们的<code>app/config/app.php</code>中可以看到</p>
<p>修改里面的两个配置：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'locale'</span>=&gt;<span class="string">'zh-CN'</span>, <span class="comment">//这个表示默认使用的是lang哪个文件夹中的内容</span></div><div class="line"></div><div class="line"><span class="string">'fallback_locale'</span> =&gt; <span class="string">'en'</span>, <span class="comment">//这个表示的是如果上面文件夹中的内容不存在时,使用哪个文件夹中的内容.</span></div></pre></td></tr></table></figure>

<h3 id="第三步:在页面调用语言包">第三步:在页面调用语言包</h3>
<p>现在我们新建了语言包文件，并且在配置文件里做好了配置，那么我们如何在页面里调用对应的内容呢？</p>
<p>在我们的模板页面中（我们采用laravel的Blade模板的方式来构建视图），我们可以这样写:</p>
<blockquote>
<p>{{Lang::get(‘hello.welcome’)}}</p>
</blockquote>
<p>从上面的代码我们可以看到，hello表示的就是<code>hello.php</code>，welcome表示的就是我们返回数组中的一个键名。</p>
<p>根据上一步<code>app/config/app.php</code>配置文件里<code>locale</code>的设置，会显示<code>zh-CN</code>下<code>hello.php</code>里面<code>welcome</code>的值。</p>
<p>那么如果我们在<code>zh-CN</code>文件夹里没有找到相应的内容,那么就到<code>en</code>文件夹中进行查找。如果也没有的话。。。你可以试试看会显示什么。</p>
<p>OK，了解了语言包新建、调用的流程以后，我想我们可以尝试着去做更多的事，比如根据访问者的地域，来调用不同的语言配置，或者让用户自己选择不同的语言设置。具体的实现这里就不在讨论。</p>
<h2 id="扩展包">扩展包</h2>
<p>这里有一个laravel的语言扩展包，里面包含了很多语言包，可以根据自己的需要下载或贡献自己制作的内容。</p>
<p><a href="https://github.com/caouecs/laravel4-lang" target="_blank" rel="external">点击查看</a></p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="Laravel_本地化语言的功能">Laravel 本地化语言的功能</h2>
<p>所谓本地化语言,就是说在不同的的国家可能使用不同的语言.现在Laravel提供了一个方便的功能,本地化语言支持。</p>
<p>好了,下面让我们来看看如何使用这个神奇的功能吧。</p>
<p>这里本地化语言使用的是<code>Lang</code>这个类。</p>
<p>例如，我们想要让程序支持中文和英文。</p>
]]></summary>
    
      <category term="laravel" scheme="http://ijiaober.github.io/tags/laravel/"/>
    
      <category term="语言包" scheme="http://ijiaober.github.io/tags/%E8%AF%AD%E8%A8%80%E5%8C%85/"/>
    
      <category term="Wow" scheme="http://ijiaober.github.io/categories/wow/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[什么是RESTful架构]]></title>
    <link href="http://ijiaober.github.io/2014/08/13/RESTful/"/>
    <id>http://ijiaober.github.io/2014/08/13/RESTful/</id>
    <published>2014-08-13T02:16:45.000Z</published>
    <updated>2014-08-14T03:03:03.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>本文引用自<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="external">阮一峰的网络日志</a>,感谢作者的分享。</p>
</blockquote>
<p>越来越多的人开始意识到，网站即软件，而且是一种新型的软件。</p>
<p>这种”互联网软件”采用客户端/服务器模式，建立在分布式体系上，通过互联网通信，具有高延时（high latency）、高并发等特点。</p>
<p>网站开发，完全可以采用软件开发的模式。但是传统上，软件和网络是两个不同的领域，很少有交集；软件开发主要针对单机环境，网络则主要研究系统之间的通信。互联网的兴起，使得这两个领域开始融合，现在我们必须考虑，如何开发在互联网环境中使用的软件。</p>
<p><strong>RESTful</strong>架构，就是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</p>
<p>但是，到底什么是RESTful架构，并不是一个容易说清楚的问题。下面，我就谈谈我理解的RESTful架构。</p>
<a id="more"></a>

<h2 id="一、起源">一、起源</h2>
<p>REST这个词，是Roy Thomas Fielding在他2000年的博士论文中提出的。</p>
<p>Fielding是一个非常重要的人，他是HTTP协议（1.0版和1.1版）的主要设计者、Apache服务器软件的作者之一、Apache基金会的第一任主席。所以，他的这篇论文一经发表，就引起了关注，并且立即对互联网开发产生了深远的影响。</p>
<p>他这样介绍论文的写作目的：</p>
<blockquote>
<p>“本文研究计算机科学两大前沿——软件和网络——的交叉点。长期以来，软件研究主要关注软件设计的分类、设计方法的演化，很少客观地评估不同的设计选择对系统行为的影响。而相反地，网络研究主要关注系统之间通信行为的细节、如何改进特定通信机制的表现，常常忽视了一个事实，那就是改变应用程序的互动风格比改变互动协议，对整体表现有更大的影响。我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。”<br>(This dissertation explores a junction on the frontiers of two research disciplines in computer science: software and networking. Software research has long been concerned with the categorization of software designs and the development of design methodologies, but has rarely been able to objectively evaluate the impact of various design choices on system behavior. Networking research, in contrast, is focused on the details of generic communication behavior between systems and improving the performance of particular communication techniques, often ignoring the fact that changing the interaction style of an application can have more impact on performance than the communication protocols used for that interaction. My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. )</p>
</blockquote>
<h2 id="二、名称">二、名称</h2>
<p>Fielding将他对互联网软件的架构原则，定名为<strong>REST</strong>，即<strong>Representational State Transfer</strong>的缩写。我对这个词组的翻译是”表现层状态转化”。</p>
<p>如果一个架构符合<strong>REST原则</strong>，就称它为<strong>RESTful</strong>架构。</p>
<p>要理解<strong>RESTful</strong>架构，最好的方法就是去理解<strong>Representational State Transfer</strong>这个词组到底是什么意思，它的每一个词代表了什么涵义。如果你把这个名称搞懂了，也就不难体会REST是一种什么样的设计。</p>
<h2 id="三、资源（Resources）">三、资源（Resources）</h2>
<p><strong>REST</strong>的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”。</p>
<p>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。</p>
<p>所谓”上网”，就是与互联网上一系列的”资源”互动，调用它的URI。</p>
<h2 id="四、表现层（Representation）">四、表现层（Representation）</h2>
<p>“资源”是一种信息实体，它可以有多种外在表现形式。我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。</p>
<p>比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。</p>
<p><strong>URI</strong>只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而<strong>URI</strong>应该只代表”资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p>
<h2 id="五、状态转化（State_Transfer）">五、状态转化（State Transfer）</h2>
<p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。</p>
<p>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（<strong>State Transfer</strong>）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</p>
<p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</p>
<h2 id="六、综述">六、综述</h2>
<p>综合上面的解释，我们总结一下什么是<strong>RESTful</strong>架构：</p>
<ol>
<li><p>每一个URI代表一种资源；</p>
</li>
<li><p>客户端和服务器之间，传递这种资源的某种表现层；</p>
</li>
<li><p>客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p>
</li>
</ol>
<h2 id="七、误区">七、误区</h2>
<p><strong>RESTful</strong>架构有一些典型的设计误区。</p>
<p>最常见的一种设计错误，就是<strong>URI</strong>包含动词。因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。</p>
<p>举例来说，某个URI是/posts/show/1，其中show是动词，这个URI就设计错了，正确的写法应该是/posts/1，然后用GET方法表示show。</p>
<p>如果某些动作是HTTP动词表示不了的，你就应该把动作做成一种资源。比如网上汇款，从账户1向账户2汇款500元，错误的URI是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　POST <span class="regexp">/accounts/</span><span class="number">1</span><span class="regexp">/transfer/</span><span class="number">500</span><span class="regexp">/to/</span><span class="number">2</span></div></pre></td></tr></table></figure>

<p>正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　POST /transaction HTTP/<span class="number">1.1</span></div><div class="line">　　Host: <span class="number">127.0</span>.<span class="number">0.1</span></div><div class="line">　　</div><div class="line">　　<span class="variable">from=</span><span class="number">1</span>&<span class="variable">to=</span><span class="number">2</span>&<span class="variable">amount=</span><span class="number">500.00</span></div></pre></td></tr></table></figure>

<p>另一个设计误区，就是在URI中加入版本号：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　<span class="symbol">http:</span>/<span class="regexp">/www.example.com/app</span><span class="regexp">/1.0/foo</span></div><div class="line">　　<span class="symbol">http:</span>/<span class="regexp">/www.example.com/app</span><span class="regexp">/1.1/foo</span></div><div class="line">　　<span class="symbol">http:</span>/<span class="regexp">/www.example.com/app</span><span class="regexp">/2.0/foo</span></div></pre></td></tr></table></figure>

<p>因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URI。版本号可以在HTTP请求头信息的Accept字段中进行区分（参见<a href="http://www.informit.com/articles/article.aspx?p=1566460" target="_blank" rel="external">Versioning REST Services</a>）：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　Accep<span class="variable">t:</span> vnd.example-<span class="keyword">com</span>.foo+json; <span class="keyword">version</span>=<span class="number">1.0</span></div><div class="line">　　Accep<span class="variable">t:</span> vnd.example-<span class="keyword">com</span>.foo+json; <span class="keyword">version</span>=<span class="number">1.1</span></div><div class="line">　　Accep<span class="variable">t:</span> vnd.example-<span class="keyword">com</span>.foo+json; <span class="keyword">version</span>=<span class="number">2.0</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<blockquote>
<p>本文引用自<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="external">阮一峰的网络日志</a>,感谢作者的分享。</p>
</blockquote>
<p>越来越多的人开始意识到，网站即软件，而且是一种新型的软件。</p>
<p>这种”互联网软件”采用客户端/服务器模式，建立在分布式体系上，通过互联网通信，具有高延时（high latency）、高并发等特点。</p>
<p>网站开发，完全可以采用软件开发的模式。但是传统上，软件和网络是两个不同的领域，很少有交集；软件开发主要针对单机环境，网络则主要研究系统之间的通信。互联网的兴起，使得这两个领域开始融合，现在我们必须考虑，如何开发在互联网环境中使用的软件。</p>
<p><strong>RESTful</strong>架构，就是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</p>
<p>但是，到底什么是RESTful架构，并不是一个容易说清楚的问题。下面，我就谈谈我理解的RESTful架构。</p>
]]></summary>
    
      <category term="RESTful" scheme="http://ijiaober.github.io/tags/RESTful/"/>
    
      <category term="Wow" scheme="http://ijiaober.github.io/categories/wow/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS动画插件：Animate.css]]></title>
    <link href="http://ijiaober.github.io/2014/08/12/Animatecss/"/>
    <id>http://ijiaober.github.io/2014/08/12/Animatecss/</id>
    <published>2014-08-12T07:13:25.000Z</published>
    <updated>2014-08-14T02:08:33.000Z</updated>
    <content type="html"><![CDATA[<p>我们先来了解一下CSS动画相关的内容：</p>
<p>通过 CSS3，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画以及 JavaScript。</p>
<h2 id="CSS3_@keyframes_规则">CSS3 @keyframes 规则</h2>
<p>如需在 CSS3 中创建动画，你需要学习 @keyframes 规则。</p>
<p>@keyframes 规则用于创建动画。在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。</p>
<p><strong>浏览器支持</strong></p>
<p>Internet Explorer 10、Firefox 以及 Opera 支持 @keyframes 规则和 animation 属性。</p>
<p>Chrome 和 Safari 需要前缀 -webkit-。</p>
<p><em>注：Internet Explorer 9，以及更早的版本，不支持 @keyframe 规则或 animation 属性。</em></p>
<a id="more"></a>

<h2 id="实例">实例</h2>
<p>创建动画：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">keyframes</span> myfirst</span></div><div class="line">{</div><div class="line"><span class="tag">from</span> <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;<span class="rule">}</span></span></div><div class="line"><span class="tag">to</span> <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> yellow</span></span>;<span class="rule">}</span></span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="at_rule">@<span class="keyword">-moz-keyframes</span> myfirst /* Firefox */</span></div><div class="line">{</div><div class="line"><span class="tag">from</span> <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;<span class="rule">}</span></span></div><div class="line"><span class="tag">to</span> <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> yellow</span></span>;<span class="rule">}</span></span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="at_rule">@<span class="keyword">-webkit-keyframes</span> myfirst /* Safari 和 Chrome */</span></div><div class="line">{</div><div class="line"><span class="tag">from</span> <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;<span class="rule">}</span></span></div><div class="line"><span class="tag">to</span> <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> yellow</span></span>;<span class="rule">}</span></span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="at_rule">@<span class="keyword">-o-keyframes</span> myfirst /* Opera */</span></div><div class="line">{</div><div class="line"><span class="tag">from</span> <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;<span class="rule">}</span></span></div><div class="line"><span class="tag">to</span> <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> yellow</span></span>;<span class="rule">}</span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>绑定实例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">div</span></div><div class="line"><span class="rules">{</span></div><div class="line"><span class="rule"><span class="attribute">animation</span>:<span class="value"> myfirst <span class="number">5s</span></span></span>;</div><div class="line"><span class="rule"><span class="attribute">-moz-animation</span>:<span class="value"> myfirst <span class="number">5s</span></span></span>;	<span class="comment">/* Firefox */</span></div><div class="line"><span class="rule"><span class="attribute">-webkit-animation</span>:<span class="value"> myfirst <span class="number">5s</span></span></span>;	<span class="comment">/* Safari 和 Chrome */</span></div><div class="line"><span class="rule"><span class="attribute">-o-animation</span>:<span class="value"> myfirst <span class="number">5s</span></span></span>;	<span class="comment">/* Opera */</span></div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p><em>注：必须定义动画的名称和时长。如果忽略时长，则动画不会允许，因为默认值是 0。</em></p>
<p>动画是使元素从一种样式逐渐变化为另一种样式的效果。<br>您可以改变任意多的样式任意多的次数。<br>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%。<br>0% 是动画的开始，100% 是动画的完成。<br>为了得到最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。</p>
<p>实例<br>当动画为 25% 及 50% 时改变背景色，然后当动画 100% 完成时再次改变：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">keyframes</span> myfirst</span></div><div class="line">{</div><div class="line">0%   <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;<span class="rule">}</span></span></div><div class="line">25%  <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> yellow</span></span>;<span class="rule">}</span></span></div><div class="line">50%  <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> blue</span></span>;<span class="rule">}</span></span></div><div class="line">100% <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> green</span></span>;<span class="rule">}</span></span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="at_rule">@<span class="keyword">-moz-keyframes</span> myfirst /* Firefox */</span></div><div class="line">{</div><div class="line">0%   <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;<span class="rule">}</span></span></div><div class="line">25%  <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> yellow</span></span>;<span class="rule">}</span></span></div><div class="line">50%  <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> blue</span></span>;<span class="rule">}</span></span></div><div class="line">100% <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> green</span></span>;<span class="rule">}</span></span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="at_rule">@<span class="keyword">-webkit-keyframes</span> myfirst /* Safari 和 Chrome */</span></div><div class="line">{</div><div class="line">0%   <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;<span class="rule">}</span></span></div><div class="line">25%  <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> yellow</span></span>;<span class="rule">}</span></span></div><div class="line">50%  <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> blue</span></span>;<span class="rule">}</span></span></div><div class="line">100% <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> green</span></span>;<span class="rule">}</span></span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="at_rule">@<span class="keyword">-o-keyframes</span> myfirst /* Opera */</span></div><div class="line">{</div><div class="line">0%   <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;<span class="rule">}</span></span></div><div class="line">25%  <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> yellow</span></span>;<span class="rule">}</span></span></div><div class="line">50%  <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> blue</span></span>;<span class="rule">}</span></span></div><div class="line">100% <span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"> green</span></span>;<span class="rule">}</span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="CSS3_动画属性">CSS3 动画属性</h2>
<p>下面的表格列出了 @keyframes 规则和所有动画属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>CSS</th>
</tr>
</thead>
<tbody>
<tr>
<td>@keyframes</td>
<td>规定动画。</td>
<td>3</td>
</tr>
<tr>
<td>animation</td>
<td>所有动画属性的简写属性，除了 animation-play-state 属性。</td>
<td>3</td>
</tr>
<tr>
<td>animation-name</td>
<td>规定 @keyframes 动画的名称。</td>
<td>3</td>
</tr>
<tr>
<td>animation-duration</td>
<td>规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td>
<td>3</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>规定动画的速度曲线。默认是 “ease”。</td>
<td>3</td>
</tr>
<tr>
<td>animation-delay</td>
<td>规定动画何时开始。默认是 0。</td>
<td>3</td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td>规定动画被播放的次数。默认是 1。</td>
<td>3</td>
</tr>
<tr>
<td>animation-direction</td>
<td>规定动画是否在下一周期逆向地播放。默认是 “normal”。</td>
<td>3</td>
</tr>
<tr>
<td>animation-play-state</td>
<td>规定动画是否正在运行或暂停。默认是 “running”。</td>
<td>3</td>
</tr>
<tr>
<td>animation-fill-mode</td>
<td>规定对象动画时间之外的状态。</td>
<td>3</td>
</tr>
</tbody>
</table>
<p>下面的两个例子设置了所有动画属性：</p>
<p>实例</p>
<p>运行名为 myfirst 的动画，其中设置了所有动画属性：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">div</span></div><div class="line"><span class="rules">{</span></div><div class="line"><span class="rule"><span class="attribute">animation-name</span>:<span class="value"> myfirst</span></span>;</div><div class="line"><span class="rule"><span class="attribute">animation-duration</span>:<span class="value"> <span class="number">5s</span></span></span>;</div><div class="line"><span class="rule"><span class="attribute">animation-timing-function</span>:<span class="value"> linear</span></span>;</div><div class="line"><span class="rule"><span class="attribute">animation-delay</span>:<span class="value"> <span class="number">2s</span></span></span>;</div><div class="line"><span class="rule"><span class="attribute">animation-iteration-count</span>:<span class="value"> infinite</span></span>;</div><div class="line"><span class="rule"><span class="attribute">animation-direction</span>:<span class="value"> alternate</span></span>;</div><div class="line"><span class="rule"><span class="attribute">animation-play-state</span>:<span class="value"> running</span></span>;</div><div class="line"><span class="comment">/* Firefox: */</span></div><div class="line"><span class="rule"><span class="attribute">-moz-animation-name</span>:<span class="value"> myfirst</span></span>;</div><div class="line"><span class="rule"><span class="attribute">-moz-animation-duration</span>:<span class="value"> <span class="number">5s</span></span></span>;</div><div class="line"><span class="rule"><span class="attribute">-moz-animation-timing-function</span>:<span class="value"> linear</span></span>;</div><div class="line"><span class="rule"><span class="attribute">-moz-animation-delay</span>:<span class="value"> <span class="number">2s</span></span></span>;</div><div class="line"><span class="rule"><span class="attribute">-moz-animation-iteration-count</span>:<span class="value"> infinite</span></span>;</div><div class="line"><span class="rule"><span class="attribute">-moz-animation-direction</span>:<span class="value"> alternate</span></span>;</div><div class="line"><span class="rule"><span class="attribute">-moz-animation-play-state</span>:<span class="value"> running</span></span>;</div><div class="line"><span class="comment">/* Safari 和 Chrome: */</span></div><div class="line"><span class="rule"><span class="attribute">-webkit-animation-name</span>:<span class="value"> myfirst</span></span>;</div><div class="line"><span class="rule"><span class="attribute">-webkit-animation-duration</span>:<span class="value"> <span class="number">5s</span></span></span>;</div><div class="line"><span class="rule"><span class="attribute">-webkit-animation-timing-function</span>:<span class="value"> linear</span></span>;</div><div class="line"><span class="rule"><span class="attribute">-webkit-animation-delay</span>:<span class="value"> <span class="number">2s</span></span></span>;</div><div class="line"><span class="rule"><span class="attribute">-webkit-animation-iteration-count</span>:<span class="value"> infinite</span></span>;</div><div class="line"><span class="rule"><span class="attribute">-webkit-animation-direction</span>:<span class="value"> alternate</span></span>;</div><div class="line"><span class="rule"><span class="attribute">-webkit-animation-play-state</span>:<span class="value"> running</span></span>;</div><div class="line"><span class="comment">/* Opera: */</span></div><div class="line"><span class="rule"><span class="attribute">-o-animation-name</span>:<span class="value"> myfirst</span></span>;</div><div class="line"><span class="rule"><span class="attribute">-o-animation-duration</span>:<span class="value"> <span class="number">5s</span></span></span>;</div><div class="line"><span class="rule"><span class="attribute">-o-animation-timing-function</span>:<span class="value"> linear</span></span>;</div><div class="line"><span class="rule"><span class="attribute">-o-animation-delay</span>:<span class="value"> <span class="number">2s</span></span></span>;</div><div class="line"><span class="rule"><span class="attribute">-o-animation-iteration-count</span>:<span class="value"> infinite</span></span>;</div><div class="line"><span class="rule"><span class="attribute">-o-animation-direction</span>:<span class="value"> alternate</span></span>;</div><div class="line"><span class="rule"><span class="attribute">-o-animation-play-state</span>:<span class="value"> running</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>与上面的动画相同，但是使用了简写的动画 animation 属性：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">div</span></div><div class="line"><span class="rules">{</span></div><div class="line"><span class="rule"><span class="attribute">animation</span>:<span class="value"> myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate</span></span>;</div><div class="line"><span class="comment">/* Firefox: */</span></div><div class="line"><span class="rule"><span class="attribute">-moz-animation</span>:<span class="value"> myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate</span></span>;</div><div class="line"><span class="comment">/* Safari 和 Chrome: */</span></div><div class="line"><span class="rule"><span class="attribute">-webkit-animation</span>:<span class="value"> myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate</span></span>;</div><div class="line"><span class="comment">/* Opera: */</span></div><div class="line"><span class="rule"><span class="attribute">-o-animation</span>:<span class="value"> myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<h2 id="Animate-css">Animate.css</h2>
<p>在了解了CSS动画的设置方式以后，就可以按照自己的想法在网页里安排各种动态效果了。</p>
<p>这里我们介绍一个写好的CSS动画插件：</p>
<p><a href="http://daneden.github.io/animate.css/" target="_blank" rel="external">Animate.css</a></p>
<h3 id="使用">使用</h3>
<p>在你页面的<code>&lt;head&gt;</code>里引用<code>animate.css</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"animate.min.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div></pre></td></tr></table></figure>

<p>你可以结合JQuery给你的动画元素添加<code>animate.css</code>里的动画样式或者你自己写的CSS规则：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">'#yourElement'</span>).addClass(<span class="string">'animated bounceOutLeft'</span>);</div></pre></td></tr></table></figure>

<p>你也可以检测一个动画结束时：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#yourElement'</span>).one(<span class="string">'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend'</span>, <span class="keyword">do</span>Something);</div></pre></td></tr></table></figure>

<p>你可以改变你的动画的持续时间,增加延迟或改变它的次数:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="id">#yourElement</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-vendor-animation-duration</span>:<span class="value"> <span class="number">3s</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-vendor-animation-delay</span>:<span class="value"> <span class="number">2s</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-vendor-animation-iteration-count</span>:<span class="value"> infinite</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>注意考虑不同浏览器适用的前缀(webkit, moz, etc)。</p>
]]></content>
    <summary type="html"><![CDATA[<p>我们先来了解一下CSS动画相关的内容：</p>
<p>通过 CSS3，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画以及 JavaScript。</p>
<h2 id="CSS3_@keyframes_规则">CSS3 @keyframes 规则</h2>
<p>如需在 CSS3 中创建动画，你需要学习 @keyframes 规则。</p>
<p>@keyframes 规则用于创建动画。在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。</p>
<p><strong>浏览器支持</strong></p>
<p>Internet Explorer 10、Firefox 以及 Opera 支持 @keyframes 规则和 animation 属性。</p>
<p>Chrome 和 Safari 需要前缀 -webkit-。</p>
<p><em>注：Internet Explorer 9，以及更早的版本，不支持 @keyframe 规则或 animation 属性。</em></p>
]]></summary>
    
      <category term="css" scheme="http://ijiaober.github.io/tags/css/"/>
    
      <category term="动画" scheme="http://ijiaober.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="Wow" scheme="http://ijiaober.github.io/categories/wow/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[快速掌握CSS选择器]]></title>
    <link href="http://ijiaober.github.io/2014/08/12/CSS-Diner/"/>
    <id>http://ijiaober.github.io/2014/08/12/CSS-Diner/</id>
    <published>2014-08-12T04:52:46.000Z</published>
    <updated>2014-08-12T06:06:22.000Z</updated>
    <content type="html"><![CDATA[<p>CSS是一种用于屏幕上渲染html，xml等一种语言，CSS主要是在相应的元素中应用样式，来渲染相对应用的元素，那么这样我们选择相应的元素就很重要了，如何选择对应的元素，此时就需要我们所说的选择器。选择器主要是用来确定html的树形结构中的DOM元素节点。</p>
<p>这里有一个有趣的小游戏，能够帮助你熟悉CSS选择器。<br><a href="http://flukeout.github.io/" target="_blank" rel="external">CSS Diner</a><br><img src="/img/39522A8D-AB37-461D-B006-5888DE5DA88B.png" alt=""></p>
]]></content>
    
    
      <category term="css" scheme="http://ijiaober.github.io/tags/css/"/>
    
      <category term="Wow" scheme="http://ijiaober.github.io/categories/wow/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[中国首个开源HTML5跨屏前端框架-Amaze UI]]></title>
    <link href="http://ijiaober.github.io/2014/08/12/Amaze-UI/"/>
    <id>http://ijiaober.github.io/2014/08/12/Amaze-UI/</id>
    <published>2014-08-12T01:56:26.000Z</published>
    <updated>2014-08-12T02:23:30.000Z</updated>
    <content type="html"><![CDATA[<p>国内有不少前端框架，但能解决浏览器存在的跨屏适配和兼容性问题的技术却很少。再加上国内对开源技术的思想意识不够，很多成熟的技术主要封闭在自己的公司内，这样造成整个产业链在技术上很难互惠互通。</p>
<p>与此同时，移动、跨屏已经成为了的当下互联网最热门的技术，而前端开发者在开发网页时，时常会陷入重复解决繁复的跨屏、适配问题，耗费精力，影响工作效率，产品开发进度慢这样的恶性循环中。</p>
<p><a href="http://amazeui.org/" target="_blank" rel="external">Amaze UI</a>应该是中国首个HTML5跨屏前端开发框架，其不仅兼容Bootstrap、Foundation、Semantic UI几者的特点，还具有以下优势：</p>
<ul>
<li><p>加入更多符合中国市场特性的元素：中文排版更优化，兼容中国本土主流浏览器</p>
</li>
<li><p>更轻量化，不仅适用于桌面端，更适合移动端</p>
</li>
<li><p>包含一些封装好的Widgets，其他框架则没有</p>
</li>
</ul>
<a id="more"></a>

<h2 id="功能简介">功能简介</h2>
<p><strong>为移动而生</strong></p>
<p>Amaze UI 遵循 “移动优先（Mobile First）”、“渐进增强（Progressive enhancement）”的理念，可先从移动设备开始开发网站，逐步在扩展的更大屏幕的设备上，专注于最重要的内容和交互，适应移动互联潮流。轻松创建跨屏适配的网页。</p>
<p>Amaze UI使用了Zepto.js库，Zepto.js的体积不到jQuery的1/3，对移动端的性能很大提升。</p>
<p><strong>组件丰富，模块化</strong></p>
<p>Amaze UI使用LESS编写样式，结构良好，易扩展，易维护；使用Seajs模块化开发、组织 JavaScript，自然、优雅。</p>
<p>Amaze UI 含近 20 个 CSS 组件、10 个 JS 组件，更有 17 款包含近 60 个主题的 Web 组件，可快速构建界面出色、体验优秀的跨屏页面，大幅度提升你的开发效率。</p>
<p><strong>本地化支持</strong></p>
<p>相比国外的前端框架，Amaze UI 专注解决中文排版优化问题，根据操作系统调整字体，实现最佳中文排版效果；针对国内主流浏览器及 App 内置浏览器提供更好的兼容性支持，为你节省大量兼容性调试时间。</p>
<p><strong>轻量级，高性能</strong></p>
<p>Amaze UI 非常注重性能，基于轻量的 Zepto.js 开发，并使用 CSS3 来做动画交互，平滑、高效，更适合移动设备，让你的 Web 应用可以高速载入。</p>
<h2 id="下载及使用">下载及使用</h2>
<p>用户可以从 <a href="http://amazeui.org/getting-started" target="_blank" rel="external">Amaze UI 官网</a> 下载打包好的模板。</p>
<p>所有文档存放在 docs/ 目录下，为方便查看演示效果，建议通过 Amaze UI 官网查看文档。</p>
]]></content>
    <summary type="html"><![CDATA[<p>国内有不少前端框架，但能解决浏览器存在的跨屏适配和兼容性问题的技术却很少。再加上国内对开源技术的思想意识不够，很多成熟的技术主要封闭在自己的公司内，这样造成整个产业链在技术上很难互惠互通。</p>
<p>与此同时，移动、跨屏已经成为了的当下互联网最热门的技术，而前端开发者在开发网页时，时常会陷入重复解决繁复的跨屏、适配问题，耗费精力，影响工作效率，产品开发进度慢这样的恶性循环中。</p>
<p><a href="http://amazeui.org/" target="_blank" rel="external">Amaze UI</a>应该是中国首个HTML5跨屏前端开发框架，其不仅兼容Bootstrap、Foundation、Semantic UI几者的特点，还具有以下优势：</p>
<ul>
<li><p>加入更多符合中国市场特性的元素：中文排版更优化，兼容中国本土主流浏览器</p>
</li>
<li><p>更轻量化，不仅适用于桌面端，更适合移动端</p>
</li>
<li><p>包含一些封装好的Widgets，其他框架则没有</p>
</li>
</ul>
]]></summary>
    
      <category term="html5" scheme="http://ijiaober.github.io/tags/html5/"/>
    
      <category term="UI" scheme="http://ijiaober.github.io/tags/UI/"/>
    
      <category term="前端" scheme="http://ijiaober.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="框架" scheme="http://ijiaober.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Wow" scheme="http://ijiaober.github.io/categories/wow/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laravel框架的体系结构]]></title>
    <link href="http://ijiaober.github.io/2014/08/09/laravel/Architecture-of-Laravel/"/>
    <id>http://ijiaober.github.io/2014/08/09/laravel/Architecture-of-Laravel/</id>
    <published>2014-08-09T14:34:30.000Z</published>
    <updated>2014-08-11T07:58:19.000Z</updated>
    <content type="html"><![CDATA[<p>Laravel被称为“全栈”式框架，因为它能够处理从网络服务到数据库管理、HTML生成的一切事情，垂直集成的web开发环境给开发者提供了更好的体验。</p>
<p>开发人员可以通过命令行工具,生成和管理Laravel项目环境。Laravel附带了一个名为<code>Artisan</code>的优秀的命令行工具,它提供了一些开发过程中有用的命令用，可以用来生成框架代码和数据库管理。它是基于强大的Symfony Console 组件开发的。</p>
<p>Laravel的目标是给开发者创造一个愉快的开发过程，并且不牺牲应用的功能性。快乐的开发者才能创造最棒的代码！为了这个目的，我们博取众框架之长处集中到Laravel中，这些框架甚至是基于Ruby on Rails、ASP.NET MVC、和Sinatra等开发语言或工具的。</p>
<p>Laravel是易于理解并且强大的，它提供了强大的工具用以开发大型、健壮的应用。杰出的IoC、数据库迁移工具和紧密集成的单元测试支持，这些工具赋予你构建任何应用的能力。</p>
<a id="more"></a>

<h2 id="目录结构">目录结构</h2>
<p><img src="/img/A6ADF261-0CA7-4662-A8EA-D0C6441A5AD5.png" alt=""></p>
<p>这是所有laravel项目具有基本上相同的目录结构，其中的每个文件都具有指定的地方。通过对目录结构的约定，确保你是按照“laravel方式”来工作。</p>
<p>正如你看到的，laravel项目下面有4个文件夹：<code>app</code>、<code>bootstrap</code>、<code>public</code>、<code>vendor</code>，这4个文件夹下面又有很多个子文件夹，当你第一次看到这么丰富的文件夹内容时，是不是觉得很有压力？没关系，我们会逐一的来了解不同的文件夹。</p>
<table>
<thead>
<tr>
<th>文件夹</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>app</td>
<td>包含了站点的controllers（控制器），models（模型），views（视图）和assets（资源）。这些是网站运行的主要代码，你会将你大部分的时间花在这个目录里。</td>
</tr>
<tr>
<td>bootstrap</td>
<td>用来存放系统启动时需要的文件，这些文件会被如index.php这样的文件调用。</td>
</tr>
<tr>
<td>public</td>
<td>这个文件夹是唯一外界可以看到的web服务器的目录。它含有laravel框架核心的引导文件index.php，这个目录也可用来存放任何可以公开的静态资源，如css，Javascript，images等。</td>
</tr>
<tr>
<td>vendor</td>
<td>用来存放所有的第三方代码，在一个典型的Laravel应用程序里，这个目录包括Laravel源代码及其相关文件，并含有额外的预包装功能的插件。</td>
</tr>
</tbody>
</table>
<h2 id="app目录">app目录</h2>
<p>正如上面提到的，所有laravel中有趣的事情都会产生在app目录，让我们多了解一些里面的内容。</p>
<p><img src="/img/49F16207-CB0D-40B7-AE28-2518F05E6765.png" alt=""></p>
<p>每一项的作用，我们列出个表来描述：</p>
<table>
<thead>
<tr>
<th>文件/文件夹</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>/app/config/</td>
<td>配置应用程序的运行时规则、 数据库、 session等等。包含大量的用来更改框架的各个方面的配置文件。大部分的配置文件中返回的选项关联PHP数组。</td>
</tr>
<tr>
<td>/app/config/app.php</td>
<td>各种应用程序级设置，即时区、 区域设置（语言环境）、 调试模式和独特的加密密钥。</td>
</tr>
<tr>
<td>/app/config/auth.php</td>
<td>控制在应用程序中如何进行身份验证，即身份验证驱动程序。</td>
</tr>
<tr>
<td>/app/config/cache.php</td>
<td>如果应用程序利用缓存来加快响应时间，要在此配置该功能。</td>
</tr>
<tr>
<td>/app/config/compile.php</td>
<td>在此处可以指定一些额外类，去包含由‘artisan optimize’命令声称的编译文件。这些应该是被包括在基本上每个请求到应用程序中的类。</td>
</tr>
<tr>
<td>/app/config/database.php</td>
<td>包含数据库的相关配置信息，即默认数据库引擎和连接信息。</td>
</tr>
<tr>
<td>/app/config/mail.php</td>
<td>为电子邮件发件引擎的配置文件，即 SMTP 服务器，From:标头</td>
</tr>
<tr>
<td>/app/config/session.php</td>
<td>控制Laravel怎样管理用户sessions,即session driver, session lifetime。</td>
</tr>
<tr>
<td>/app/config/view.php</td>
<td>模板系统的杂项配置。</td>
</tr>
<tr>
<td>/app/controllers</td>
<td>包含用于提供基本的逻辑、 数据模型交互以及加载应用程序的视图文件的控制器类。</td>
</tr>
<tr>
<td>/app/database/migrations/</td>
<td>包含一些 PHP 类，允许Laravel更新当前数据库的架构并同时保持所有版本的数据库的同步。迁移文件是使用Artisan工具生成的。</td>
</tr>
<tr>
<td>/app/database/seeds/</td>
<td>包含允许Artisan工具用关系数据来填充数据库表的 PHP 文件。</td>
</tr>
<tr>
<td>/app/lang/</td>
<td>PHP 文件，其中包含使应用程序易于本地化的字符串的数组。默认情况下目录包含英语语言的分页和表单验证的语言行。</td>
</tr>
<tr>
<td>/app/models/</td>
<td>模型是代表应用程序的信息（数据）和操作数据的规则的一些类。在大多数情况下，数据库中的每个表将对应应用中的一个模型。应用程序业务逻辑的大部分将集中在模型中。</td>
</tr>
<tr>
<td>/app/start/</td>
<td>包含与Artisan工具以及全球和本地上下文相关的自定义设置。</td>
</tr>
<tr>
<td>/app/storage/</td>
<td>该目录存储Laravel各种服务的临时文件，如session, cache,  compiled view templates。这个目录在web服务器上必须是可以写入的。该目录由Laravel维护，我们可以不关心。</td>
</tr>
<tr>
<td>/app/tests/</td>
<td>该文件夹给你提供了一个方便的位置，用来做单元测试。如果你使用PHPUnit，你可以使用Artisan工具一次执行所有的测试。</td>
</tr>
<tr>
<td>/app/views/</td>
<td>该文件夹包含了控制器或者路由使用的HTML模版。请注意，这个文件夹下你只能放置模版文件。其他的静态资源文件如css, javascript和images文件应该放在/public文件夹下。</td>
</tr>
<tr>
<td>/app/routes.php</td>
<td>这是您的应用程序的路由文件，其中包含路由规则，告诉 Laravel 如何将传入的请求连接到路由处理的闭包函数、控制器和操作。该文件还包含几个事件声明，包括错误页的，可以用于定义视图的composers。</td>
</tr>
<tr>
<td>/app/filters.php</td>
<td>此文件包含各种应用程序和路由筛选方法，用来改变您的应用程序的结果。Laravel 具有访问控制和 XSS 保护的一些预定义筛选器。</td>
</tr>
</tbody>
</table>
<p>我们通过上面的表格可以看到，只要花一些心思在建立和命名的文件上，就能得到一个具有良好文件系统的结构化的应用。</p>
<h2 id="模型-视图-控制器(MVC)">模型-视图-控制器(MVC)</h2>
<p>让我们更深一步了解如何建立laravel应用。你可能已经注意到，<code>app</code>目录下面有三子目录：<code>models</code>，<code>views</code>，<code>controllers</code>。这是表明了laravel是model-view-controller(MVC)架构模式，它将“业务逻辑”与图形用户界面相关的输入和显示逻辑（GUI）分离。在laravel Web应用中，业务逻辑通常由数据模型(如用户，博客文章)组成，GUI则只是一个浏览器中的页面。MVC设计模式在Web的开发领域中非常受欢迎。</p>
<p>MVC模式的三个要素：</p>
<ul>
<li>模型（model）</li>
<li>视图（view）</li>
<li>控制器（controller）</li>
</ul>
<h2 id="Laravel的响应流程">Laravel的响应流程</h2>
<p>一个典型的laravel应用程序由上面提到的MVC组成，如下图：</p>
<p><img src="/img/MVC.bmp" alt=""></p>
<p>当访问一个laravel应用程序时，浏览器发送一个请求，由Web服务器接收并传递到laravel的路由引擎。该laravel路由器接收到请求后，根据配置重定向到相应的控制器类的方法。</p>
<p>然后由控制器类接管。在某些情况下，控制器将立即渲染一个视图，这是一个模板，将被转换成HTML并且发送回浏览器。更普遍的动态网站，控制器与模型进行交互，与数据库进行通信。调用模型后,控制器呈现最终视图(HTML、CSS和图像)并返回完整的web页面到用户的浏览器。</p>
<p>Laravel提倡模型、视图和控制器，应保持完全独立的存储单独的文件在不同的目录。这就是laravel的目录结构发挥作用的地方。</p>
<p>像MVC这样的设计模式的产生，就是为了让开发者的工作更加轻松。这就是Laravel比那些不用任何模式的PHP厉害的地方。如果这种讨论你现在感觉很抽象，不用担心！当你开始用Laravel工作，你都不会意识到你是在一种设计模式中工作。过一段时间后，就会变得自然了。</p>
<h2 id="数据模型">数据模型</h2>
<p>数据模型是任何应用程序的基础，它建立了应用程序的业务逻辑。每一块数据通过使用一个数据库表表示。laravel提供了一些技术来简化对数据库的访问。</p>
<p>Laravel通过将数据库中的表行转成能被轻松操纵的PHP对象，来连接应用程序的数据模型和数据库表。它还使您能够执行业务规则，描述在应用程序中不同的数据模型之间的关系等。例如，一个人的家庭关系可以用Laravel Eloquent OR / M描述如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Eloquent</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">mother</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> <span class="variable">$this</span><span class="variable">-&gt;belongsTo</span>(<span class="string">'Mother'</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">father</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> <span class="variable">$this</span><span class="variable">-&gt;belongsTo</span>(<span class="string">'Father'</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">spouse</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> <span class="variable">$this</span><span class="variable">-&gt;hasOne</span>(<span class="string">'Spouse'</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sisters</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> <span class="variable">$this</span><span class="variable">-&gt;hasMany</span>(<span class="string">'Sister'</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">brothers</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> <span class="variable">$this</span><span class="variable">-&gt;hasMany</span>(<span class="string">'Brother'</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>Laravel被称为“全栈”式框架，因为它能够处理从网络服务到数据库管理、HTML生成的一切事情，垂直集成的web开发环境给开发者提供了更好的体验。</p>
<p>开发人员可以通过命令行工具,生成和管理Laravel项目环境。Laravel附带了一个名为<code>Artisan</code>的优秀的命令行工具,它提供了一些开发过程中有用的命令用，可以用来生成框架代码和数据库管理。它是基于强大的Symfony Console 组件开发的。</p>
<p>Laravel的目标是给开发者创造一个愉快的开发过程，并且不牺牲应用的功能性。快乐的开发者才能创造最棒的代码！为了这个目的，我们博取众框架之长处集中到Laravel中，这些框架甚至是基于Ruby on Rails、ASP.NET MVC、和Sinatra等开发语言或工具的。</p>
<p>Laravel是易于理解并且强大的，它提供了强大的工具用以开发大型、健壮的应用。杰出的IoC、数据库迁移工具和紧密集成的单元测试支持，这些工具赋予你构建任何应用的能力。</p>
]]></summary>
    
      <category term="laravel" scheme="http://ijiaober.github.io/tags/laravel/"/>
    
      <category term="框架" scheme="http://ijiaober.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="结构" scheme="http://ijiaober.github.io/tags/%E7%BB%93%E6%9E%84/"/>
    
      <category term="Wow" scheme="http://ijiaober.github.io/categories/wow/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[像PPT一样浏览网站]]></title>
    <link href="http://ijiaober.github.io/2014/08/09/One-Page-Scroll/"/>
    <id>http://ijiaober.github.io/2014/08/09/One-Page-Scroll/</id>
    <published>2014-08-09T02:37:03.000Z</published>
    <updated>2014-08-09T13:47:51.000Z</updated>
    <content type="html"><![CDATA[<p>有很多网站的首页采用视差滚动的效果设计成单页面，就像制作PPT一样，每一屏都是一个内容。既能用简短的文字和图形传达了内容，又用视觉感很强的动画设计强化了主题。</p>
<p>今天我们来看一下单页面一屏切换内容的制作方式，效果有点像<a href="http://www.apple.com/iphone-5s/" target="_blank" rel="external">iphone5s</a>的产品页面。</p>
<p>首先我们来了解一下视差滚动的概念，然后介绍一款JQuery的插件：</p>
<a id="more"></a>

<h2 id="什么是视差滚动">什么是视差滚动</h2>
<p>视差滚动（Parallax Scrolling）是指让多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验。</p>
<p>通过一个很长的网页页面，其中利用一些令人惊叹的插图和图形，并使用视差滚动（Parallax Scrolling）效果，让多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验。完美的展示了一个复杂的过程，让你犹如置身其中。</p>
<p>固定背景不让它随着滚动轴移动，但包含背景的容器是跟着滚动的，所造成的视觉差异看起来就像跟转换场景一样。</p>
<h2 id="视差滚动效果的特点">视差滚动效果的特点</h2>
<ol>
<li><p>直观的设计，快速的响应速度，更合适运用于单页面</p>
</li>
<li><p>差异滚动 分层视差</p>
</li>
</ol>
<p>页面上很多的元素在相互独立地滚动着，如果我们来对其它分层的话，可以有两到三层 ：背景层，内容层，贴图层。</p>
<p>以上内容摘录自：<a href="http://www.cnblogs.com/JoannaQ/archive/2013/02/08/2909111.html" target="_blank" rel="external">视差滚动(Parallax Scrolling)效果的原理和实现</a>感兴趣的童鞋可以进去看看详细内容。</p>
<h2 id="One_Page_Scroll_1-3">One Page Scroll 1.3</h2>
<p>One Page Scroll是一个JQuery插件，能让你的网站页面允许用户一屏一屏的滚动，它完美的将内容呈现在同一个页面。你只需要引用相应的JS和CSS文件，经过简单的设置，就可以做出很炫的切屏效果。</p>
<p><a href="http://sandbox.runjs.cn/show/jizvcqyg" target="_blank" rel="external">Demo</a></p>
<p class="bg-warning"> 注:One Page Scroll 1.3需要jQuery 1.9.0以上版本支持。</p>

<h3 id="兼容性">兼容性</h3>
<p>现代的浏览器，如火狐，Chrome，Safari在桌面电脑和智能手机已经过测试。没有测试IE浏览器。</p>
<h3 id="基本用法">基本用法</h3>
<ol>
<li><p><a href="https://github.com/peachananr/onepage-scroll" target="_blank" rel="external">下载</a>最新的插件包.</p>
</li>
<li><p>将<code>onepage-scroll.css</code>、<code>jquery.onepage-scroll.js</code>引用到你文档的<code>&lt;head&gt;</code>内，当然你也需要引用一个1.9.0以上版本的jQery文件。</p>
</li>
<li><p>你的页面结构大概如下：</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  <span class="keyword">...</span></div><div class="line">  &lt;div class=<span class="string">"main"</span>&gt; <span class="comment">#main是我们要操作的容器，可以是id也可以是class，名字自取，这里以class为例。</span></div><div class="line">    &lt;section&gt;<span class="keyword">...</span>&lt;/section&gt; <span class="comment">#每屏内容的容器，可以不用section，自定义一个标签。</span></div><div class="line">    &lt;section&gt;<span class="keyword">...</span>&lt;/section&gt;</div><div class="line">    <span class="keyword">...</span></div><div class="line">  &lt;/div&gt;</div><div class="line">  <span class="keyword">...</span></div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>

<ol>
<li>设置好页面内容以后，我们在页面底部来配置容器里的动作：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".main"</span>).onepage_scroll({</div><div class="line">   sectionContainer: <span class="string">"section"</span>,     <span class="comment">// 每屏内容的容器标签，可自定义，要和上面代码对应上。</span></div><div class="line">   easing: <span class="string">"ease"</span>,                  <span class="comment">// CSS3动画效果 "ease", "linear", "ease-in", "ease-out", "ease-in-out", 或者设置值 "cubic-bezier(0.175, 0.885, 0.420, 1.310)"</span></div><div class="line">   animationTime: <span class="number">1000</span>,             <span class="comment">// 定义切换动画的时间</span></div><div class="line">   pagination: <span class="literal">true</span>,                <span class="comment">// 显示/隐藏分页按钮</span></div><div class="line">   updateURL: <span class="literal">false</span>,                <span class="comment">// URL地址切换。</span></div><div class="line">   beforeMove: <span class="function"><span class="keyword">function</span><span class="params">(index)</span> </span>{},  <span class="comment">// 在页面调用动画前的回调函数。</span></div><div class="line">   afterMove: <span class="function"><span class="keyword">function</span><span class="params">(index)</span> </span>{},   <span class="comment">// 完成动画之后的回调函数。</span></div><div class="line">   loop: <span class="literal">false</span>,                     <span class="comment">// 是否循环回到第一页或者最后一页。</span></div><div class="line">   keyboard: <span class="literal">true</span>,                  <span class="comment">// 是否开启键盘控制。</span></div><div class="line">   responsiveFallback: <span class="literal">false</span>,        <span class="comment">// 设置触发动画的屏幕最小宽度，例如设置成600，将屏幕小于600时将正常的页面滚动。</span></div><div class="line">   direction: <span class="string">"vertical"</span>            <span class="comment">// 运动方向 纵向"vertical" 和 横向"horizontal"。  </span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>现在你的页面已经可以按照切屏的效果来显示了。</p>
<h3 id="快捷键">快捷键</h3>
<p>你可以用快捷键来操作动画：</p>
<p>上/下按键或者Page Up/Page Down键来切换到下一屏内容，当然如果是设置成横向移动的话，左右键也是可以切换的。</p>
<p>Home键切换到第一屏，End键切换到最后一屏。</p>
<h3 id="公共方法">公共方法</h3>
<p>你可以通过编写程序，丰富你的页面动画：</p>
<p><strong>$.fn.moveUp()</strong> 移动到上一屏：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">".main"</span>).moveUp();</div></pre></td></tr></table></figure>

<p><strong>$.fn.moveDown()</strong> 移动到下一屏：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">".main"</span>).moveDown();</div></pre></td></tr></table></figure>

<p><strong>$.fn.moveTo(page_index)</strong> 移动到指定屏：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">".main"</span>).moveTo(<span class="number">3</span>);</div></pre></td></tr></table></figure>

<h3 id="回调函数">回调函数</h3>
<p><strong>beforeMove(current_page_index)</strong> 切屏动作之前调用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".main"</span>).onepage_scroll({</div><div class="line">    beforeMove: <span class="keyword">function</span>(index) {</div><div class="line">      <span class="keyword">...</span></div><div class="line">    }</div><div class="line">  });</div></pre></td></tr></table></figure>

<p><strong>afterMove(next_page_index)</strong> 切屏动作之后调用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".main"</span>).onepage_scroll({</div><div class="line">  afterMove: <span class="keyword">function</span>(index) {</div><div class="line">    <span class="keyword">...</span></div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>有很多网站的首页采用视差滚动的效果设计成单页面，就像制作PPT一样，每一屏都是一个内容。既能用简短的文字和图形传达了内容，又用视觉感很强的动画设计强化了主题。</p>
<p>今天我们来看一下单页面一屏切换内容的制作方式，效果有点像<a href="http://www.apple.com/iphone-5s/" target="_blank" rel="external">iphone5s</a>的产品页面。</p>
<p>首先我们来了解一下视差滚动的概念，然后介绍一款JQuery的插件：</p>
]]></summary>
    
      <category term="单页面" scheme="http://ijiaober.github.io/tags/%E5%8D%95%E9%A1%B5%E9%9D%A2/"/>
    
      <category term="ppt" scheme="http://ijiaober.github.io/tags/ppt/"/>
    
      <category term="one page scroll" scheme="http://ijiaober.github.io/tags/one-page-scroll/"/>
    
      <category term="Wow" scheme="http://ijiaober.github.io/categories/wow/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo使用攻略（十）百度统计、收藏图标、友情链接]]></title>
    <link href="http://ijiaober.github.io/2014/08/08/hexo/hexo-10/"/>
    <id>http://ijiaober.github.io/2014/08/08/hexo/hexo-10/</id>
    <published>2014-08-08T01:22:06.000Z</published>
    <updated>2014-08-08T09:47:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="百度统计">百度统计</h2>
<p>统计这部分，可以选择任何的统计服务商，比如<a href="http://tongji.baidu.com" target="_blank" rel="external">百度</a>、<a href="http://www.google.com/analytics/" target="_blank" rel="external">Google</a>或者其他你喜欢的。</p>
<p>这里我们用百度统计来举例：</p>
<ol>
<li><p>注册并登录<a href="http://tongji.baidu.com" target="_blank" rel="external">百度统计</a>；</p>
</li>
<li><p>在代码获取里复制你的统计代码：</p>
</li>
</ol>
<p><img src="/img/8C7D51F6-1437-42A4-B9A3-633C36F0161D.png" alt=""></p>
<ol>
<li>打开<code>themes/light/layout/_partial/after_footer.ejs</code>文件，把刚才复制的代码粘贴到最下面。当然你也可以粘贴到其他的文件里，只要保证这段代码能够出现在每一页的<code>body</code>标签里就行了。</li>
</ol>
<a id="more"></a>

<h2 id="收藏图标">收藏图标</h2>
<ol>
<li><p>首先在<code>themes/light/layout/_partial/head.ejs</code>里将<code>&lt;link href=&quot;&lt;%- config.root %&gt;favicon.png&quot; rel=&quot;icon&quot;&gt;</code>替换为<code>&lt;link href=&quot;&lt;%- config.root %&gt;favicon.ico&quot; rel=&quot;icon&quot; type=&quot;image/x-ico&quot;&gt;</code>。</p>
</li>
<li><p>将制作好的favicon.ico图标文件放在source目录下。网上有很多在线生成ico图标的工具，大家可以自行搜索一下。</p>
</li>
</ol>
<h2 id="友情链接">友情链接</h2>
<ol>
<li>在<code>themes/light/layout/_widget</code>中新建一个<code>.ejs</code>的文件，比如<code>links.ejs</code>。</li>
<li>内容如下：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"widget tag"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">h3</span> <span class="attribute">class</span>=<span class="value">"title"</span>&gt;</span><span class="vbscript">&lt;%= __(<span class="comment">'links') %&gt;</span></span><span class="tag">&lt;/<span class="title">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span> #下面是每次增加和修改友情链接的地方</div><div class="line"><span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://ijiaober.Github.io/"</span> <span class="attribute">title</span>=<span class="value">"ijiaober's Blog"</span>&gt;</span>GoonX<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<ol>
<li>打开<code>themes/light/languages</code>下你选择的语言包文件，添加：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">links</span>: <span class="string">友情链接</span></div></pre></td></tr></table></figure>

<ol>
<li>在<code>themes/light/_config.yml</code>中的<code>widgets</code>部分，添加如下：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">widget<span class="variable">s:</span></div><div class="line">- links</div></pre></td></tr></table></figure>

<p>添加其他的widgets也如法炮制。</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="百度统计">百度统计</h2>
<p>统计这部分，可以选择任何的统计服务商，比如<a href="http://tongji.baidu.com" target="_blank" rel="external">百度</a>、<a href="http://www.google.com/analytics/" target="_blank" rel="external">Google</a>或者其他你喜欢的。</p>
<p>这里我们用百度统计来举例：</p>
<ol>
<li><p>注册并登录<a href="http://tongji.baidu.com" target="_blank" rel="external">百度统计</a>；</p>
</li>
<li><p>在代码获取里复制你的统计代码：</p>
</li>
</ol>
<p><img src="/img/8C7D51F6-1437-42A4-B9A3-633C36F0161D.png" alt=""></p>
<ol>
<li>打开<code>themes/light/layout/_partial/after_footer.ejs</code>文件，把刚才复制的代码粘贴到最下面。当然你也可以粘贴到其他的文件里，只要保证这段代码能够出现在每一页的<code>body</code>标签里就行了。</li>
</ol>
]]></summary>
    
      <category term="hexo" scheme="http://ijiaober.github.io/tags/hexo/"/>
    
      <category term="统计" scheme="http://ijiaober.github.io/tags/%E7%BB%9F%E8%AE%A1/"/>
    
      <category term="收藏图标" scheme="http://ijiaober.github.io/tags/%E6%94%B6%E8%97%8F%E5%9B%BE%E6%A0%87/"/>
    
      <category term="友情链接" scheme="http://ijiaober.github.io/tags/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/"/>
    
      <category term="Hexo" scheme="http://ijiaober.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[让程序员抓狂的排序算法教学视频]]></title>
    <link href="http://ijiaober.github.io/2014/08/07/sorting-algorithm/"/>
    <id>http://ijiaober.github.io/2014/08/07/sorting-algorithm/</id>
    <published>2014-08-07T10:04:22.000Z</published>
    <updated>2014-08-07T10:18:38.000Z</updated>
    <content type="html"><![CDATA[<p>罗马尼亚是一个爱跳舞的民族，如果你看过罗马尼亚老电影《奇普里安.博隆贝斯库》，那欢快悠扬的舞曲之炽热呵，非把你融化不可！</p>
<p>罗马尼亚人爱跳舞，不仅体现在电影和节日中，你会发现舞蹈无处不在，即使是大学里的计算机课程中的排序算法教学，也被用舞蹈的形式表现出来。</p>
<p>罗马尼亚Tirgu Mures地区的Sapientia大学就制作了一系列用民族舞蹈形式表现的各种排序算法的工作原理。下面就是这些视频。</p>
<p>舞跳的很好，但教学效果如何，我很难评判，至少让我对这几种排序算法的效率产生了严重的怀疑。 :)</p>
<a id="more"></a>

<h2 id="选择排序法">选择排序法</h2>
<p>选择排序(Selection sort)是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<p>选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的表进行排序总共进行至多n-1次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</p>
<embed src="http://static.video.qq.com/TPout.swf?vid=w013154oge5&amp;auto=0" allowfullscreen="true" quality="high" width="560" height="477" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">

<h2 id="希尔排序法">希尔排序法</h2>
<p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。</p>
<p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>
<p>1.插入排序在对几乎已经排好序的数据操作时， 效率高， 即可以达到线性排序的效率<br>2.但插入排序一般来说是低效的， 因为插入排序每次只能将数据移动一位</p>
<embed src="http://static.video.qq.com/TPout.swf?vid=v01311791t3&amp;auto=0" allowfullscreen="true" quality="high" width="560" height="477" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">

<h2 id="冒泡排序法">冒泡排序法</h2>
<p>冒泡排序（Bubble Sort，台湾译为：泡沫排序或气泡排序）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<p>冒泡排序对n个项目需要O(n^2)的比较次数，且可以原地排序。尽管这个算法是最简单了解和实作的排序算法之一，但它对于少数元素之外的数列排序是很没有效率的。</p>
<embed src="http://static.video.qq.com/TPout.swf?vid=n0131ldxpzw&amp;auto=0" allowfullscreen="true" quality="high" width="560" height="477" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">

<h2 id="快速排序法">快速排序法</h2>
<p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n log n) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p>
<embed src="http://static.video.qq.com/TPout.swf?vid=w01315ff3b6&amp;auto=0" allowfullscreen="true" quality="high" width="560" height="477" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">

<h2 id="归并排序法">归并排序法</h2>
<p>归并排序（Merge sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p>
<embed src="http://static.video.qq.com/TPout.swf?vid=y0131d5dm1o&amp;auto=0" allowfullscreen="true" quality="high" width="560" height="477" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">

<h2 id="插入排序法">插入排序法</h2>
<p>插入排序（Insertion Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<embed src="http://static.video.qq.com/TPout.swf?vid=v013112e790&amp;auto=0" allowfullscreen="true" quality="high" width="560" height="477" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">

]]></content>
    <summary type="html"><![CDATA[<p>罗马尼亚是一个爱跳舞的民族，如果你看过罗马尼亚老电影《奇普里安.博隆贝斯库》，那欢快悠扬的舞曲之炽热呵，非把你融化不可！</p>
<p>罗马尼亚人爱跳舞，不仅体现在电影和节日中，你会发现舞蹈无处不在，即使是大学里的计算机课程中的排序算法教学，也被用舞蹈的形式表现出来。</p>
<p>罗马尼亚Tirgu Mures地区的Sapientia大学就制作了一系列用民族舞蹈形式表现的各种排序算法的工作原理。下面就是这些视频。</p>
<p>舞跳的很好，但教学效果如何，我很难评判，至少让我对这几种排序算法的效率产生了严重的怀疑。 :)</p>
]]></summary>
    
      <category term="排序" scheme="http://ijiaober.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="算法" scheme="http://ijiaober.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="视界" scheme="http://ijiaober.github.io/categories/horizon/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo使用攻略：（九）为Hexo添加百度搜索]]></title>
    <link href="http://ijiaober.github.io/2014/08/07/hexo/hexo-09/"/>
    <id>http://ijiaober.github.io/2014/08/07/hexo/hexo-09/</id>
    <published>2014-08-07T06:19:21.000Z</published>
    <updated>2014-08-07T06:23:47.000Z</updated>
    <content type="html"><![CDATA[<p>默认的Hexo用的是Google的搜索，因为某些不可抗拒的原因，访问起来不是很流畅，所以我们设置成百度搜索。</p>
<p>打开<code>themes/light/layout/_widget/search.ejs</code>文件，里面内容替换为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="variable">class=</span><span class="string">"search"</span>&gt;</div><div class="line">  &lt;form <span class="variable">action=</span><span class="string">"//baidu.com/baidu"</span> <span class="variable">method=</span><span class="string">"get"</span> <span class="variable">accept-charset=</span><span class="string">"utf-8"</span>&gt;</div><div class="line">    &lt;input <span class="variable">type=</span><span class="string">"search"</span> <span class="variable">name=</span><span class="string">"word"</span> <span class="variable">results=</span><span class="string">"0"</span> <span class="variable">placeholder=</span><span class="string">"&lt;%= __('search') %&gt;"</span>&gt;</div><div class="line">    &lt;input <span class="variable">type=</span><span class="string">"hidden"</span> <span class="variable">name=</span><span class="string">"si"</span> <span class="variable">value=</span><span class="string">"&lt;%- config.url.replace(/^https?:\/\//, '') %&gt;"</span>&gt;</div><div class="line">    &lt;input <span class="variable">name=</span>tn <span class="variable">type=</span>hidden <span class="variable">value=</span><span class="string">"bds"</span>&gt;</div><div class="line">	&lt;input <span class="variable">name=</span>cl <span class="variable">type=</span>hidden <span class="variable">value=</span><span class="string">"3"</span>&gt;</div><div class="line">	&lt;input <span class="variable">name=</span>ct <span class="variable">type=</span>hidden <span class="variable">value=</span><span class="string">"2097152"</span>&gt;</div><div class="line">	&lt;input <span class="variable">name=</span>s <span class="variable">type=</span>hidden <span class="variable">value=</span><span class="string">"on"</span>&gt;</div><div class="line">  &lt;/form&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="hexo" scheme="http://ijiaober.github.io/tags/hexo/"/>
    
      <category term="百度" scheme="http://ijiaober.github.io/tags/%E7%99%BE%E5%BA%A6/"/>
    
      <category term="Hexo" scheme="http://ijiaober.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo使用攻略：（八）为Hexo添加RSS和Sitemap]]></title>
    <link href="http://ijiaober.github.io/2014/08/07/hexo/hexo-08/"/>
    <id>http://ijiaober.github.io/2014/08/07/hexo/hexo-08/</id>
    <published>2014-08-07T02:51:43.000Z</published>
    <updated>2014-08-07T05:25:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="添加RSS">添加RSS</h2>
<ol>
<li>用<code>npm</code>安装插件：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-feed</span></div></pre></td></tr></table></figure>

<ol>
<li>在配置文件里引用插件。在<code>hexo/_config.yml</code>添加代码：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plugin<span class="variable">s:</span></div><div class="line">- hexo-generator-feed</div></pre></td></tr></table></figure>

<ol>
<li>在导航上添加RSS链接。打开<code>themes/light/_config.yml</code>文件，<code>rss:</code>部分修改为<code>rss: /atom.xml</code>,然后在<code>menu</code>部分添加<code>Rss: /atom.xml</code>。完成后代码类似下面的效果：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="label">menu:</span></div><div class="line">  Home: /</div><div class="line">  Archives: /archives</div><div class="line">  Rss: /atom.xml</div></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="添加Sitemap">添加Sitemap</h2>
<p>和RSS一样，需要下载个插件。</p>
<ol>
<li>安装插件：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-sitemap</span></div></pre></td></tr></table></figure>

<ol>
<li>引用插件，同样在<code>hexo/_config.yml</code>中添加代码：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plugins:</div><div class="line">-<span class="ruby"> hexo-generator-feed</span></div><div class="line">-<span class="ruby"> hexo-generator-sitemap</span></div></pre></td></tr></table></figure>

<ol>
<li>访问<code>/sitemap.xml</code>就能看到站点地图了。</li>
</ol>
]]></content>
    <summary type="html"><![CDATA[<h2 id="添加RSS">添加RSS</h2>
<ol>
<li>用<code>npm</code>安装插件：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-feed</span></div></pre></td></tr></table></figure>

<ol>
<li>在配置文件里引用插件。在<code>hexo/_config.yml</code>添加代码：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plugin<span class="variable">s:</span></div><div class="line">- hexo-generator-feed</div></pre></td></tr></table></figure>

<ol>
<li>在导航上添加RSS链接。打开<code>themes/light/_config.yml</code>文件，<code>rss:</code>部分修改为<code>rss: /atom.xml</code>,然后在<code>menu</code>部分添加<code>Rss: /atom.xml</code>。完成后代码类似下面的效果：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="label">menu:</span></div><div class="line">  Home: /</div><div class="line">  Archives: /archives</div><div class="line">  Rss: /atom.xml</div></pre></td></tr></table></figure>

]]></summary>
    
      <category term="hexo" scheme="http://ijiaober.github.io/tags/hexo/"/>
    
      <category term="RSS" scheme="http://ijiaober.github.io/tags/RSS/"/>
    
      <category term="Hexo" scheme="http://ijiaober.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo使用攻略：（七）设置Hexo里的评论和分享]]></title>
    <link href="http://ijiaober.github.io/2014/08/06/hexo/hexo-07/"/>
    <id>http://ijiaober.github.io/2014/08/06/hexo/hexo-07/</id>
    <published>2014-08-06T04:30:40.000Z</published>
    <updated>2014-08-06T12:57:00.000Z</updated>
    <content type="html"><![CDATA[<p>现在我们的Hexo安装了漂亮的主题，并且设置了导航菜单，也发布了几篇文章，是不是急不可耐的想和大家一起分享你的内容了？</p>
<p>在和朋友们分享文章的时候，有两个必不可少的功能，评论 和 分享，这一节我们就来了解一下这两个设置。</p>
<a id="more"></a>

<h2 id="评论设置">评论设置</h2>
<p>在Hexo中，默认使用的评论是国外的Disqus,不过因为国内的”网络环境”问题，我们改为国内的“多说”评论系统。</p>
<h3 id="注册多说账户">注册多说账户</h3>
<p>访问<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>网站，点击登录，根据自己的习惯选择一个登录方式。</p>
<p>登录后根据提示填写一些基本信息，下一步就跳转到 工具 —- 获取代码 这页了。复制这里的<code>通用代码</code>备用。</p>
<h3 id="修改comment文件">修改comment文件</h3>
<p>打开<code>themes/主题名/layout/_partial/comment.ejs</code>这个文件    ，在下面位置粘贴刚才复制的代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="vbscript">&lt;% <span class="keyword">if</span> ( page.comments){ %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"comment"</span>&gt;</span></div><div class="line">此处粘贴通用代码</div><div class="line"><span class="tag">&lt;/<span class="title">section</span>&gt;</span></div><div class="line"><span class="vbscript">&lt;% } %&gt;</span></div></pre></td></tr></table></figure>

<p>记得粘贴完后，替换代码里的标题、网址、ID三项信息。</p>
<p>标题可以用<code>&lt;%= item.title %&gt;</code>来替换，</p>
<p>网址可以用<code>&lt;%- config.url %&gt;&lt;%- config.root%&gt;&lt;%- item.path %&gt;</code>来替换,</p>
<p>ID可以用<code>&lt;%- item.path %&gt;</code>来替换。</p>
<h2 id="分享设置">分享设置</h2>
<p>访问<a href="http://share.baidu.com/code" target="_blank" rel="external">百度分享</a>,复制代码备用。</p>
<p>找到<code>themes/light/layout/_partial/post/share.ejs</code>页面，用刚才复制的代码替换里面的内容，搞定。</p>
<p>如果想要调换分享图标可参考百度分享的<a href="http://share.baidu.com/code/advance" target="_blank" rel="external">说明</a>来修改。</p>
]]></content>
    <summary type="html"><![CDATA[<p>现在我们的Hexo安装了漂亮的主题，并且设置了导航菜单，也发布了几篇文章，是不是急不可耐的想和大家一起分享你的内容了？</p>
<p>在和朋友们分享文章的时候，有两个必不可少的功能，评论 和 分享，这一节我们就来了解一下这两个设置。</p>
]]></summary>
    
      <category term="hexo" scheme="http://ijiaober.github.io/tags/hexo/"/>
    
      <category term="评论" scheme="http://ijiaober.github.io/tags/%E8%AF%84%E8%AE%BA/"/>
    
      <category term="分享" scheme="http://ijiaober.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="Hexo" scheme="http://ijiaober.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo使用攻略：（六）Hexo主题安装]]></title>
    <link href="http://ijiaober.github.io/2014/08/05/hexo/hexo-06/"/>
    <id>http://ijiaober.github.io/2014/08/05/hexo/hexo-06/</id>
    <published>2014-08-05T07:45:39.000Z</published>
    <updated>2014-08-05T07:58:20.000Z</updated>
    <content type="html"><![CDATA[<p>嘿，我们搭建好了Hexo,设置好了导航菜单和分类，写了一些文章并且同步到GitHub上了，可我们不满足，我们想要页面看起来更好看一些。</p>
<p>我们可以通过安装主题的方式来快速选择喜欢的样式！</p>
<ol>
<li><p>打开Hexo的<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">Themes</a>;</p>
</li>
<li><p>找到你心仪的主题并且点击主题名称进入详细页面；</p>
</li>
<li><p>找到<code>install</code>这一项，复制下面的内容，比如Light主题的安装内容为：</p>
<blockquote>
<p>git clone <a href="https://github.com/hexojs/hexo-theme-light.git" target="_blank" rel="external">https://github.com/hexojs/hexo-theme-light.git</a> themes/light</p>
</blockquote>
</li>
<li><p>在Hexo目录下运行上面复制的内容，就会自动下载该主题到你的Themes目录。</p>
</li>
<li><p>下载完毕后，在站点配置文件<code>_config.yml</code>里设置对应的主题名称：</p>
<blockquote>
<p>theme: light</p>
</blockquote>
</li>
<li>根据自己的需要，配置主题的配置文件<code>_config.yml</code>;</li>
</ol>
<p>OK，我们成功的安装了一个主题。</p>
]]></content>
    
    
      <category term="hexo" scheme="http://ijiaober.github.io/tags/hexo/"/>
    
      <category term="主题" scheme="http://ijiaober.github.io/tags/%E4%B8%BB%E9%A2%98/"/>
    
      <category term="Hexo" scheme="http://ijiaober.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo使用攻略：（五）Hexo导航菜单设置]]></title>
    <link href="http://ijiaober.github.io/2014/08/05/hexo/hexo-05/"/>
    <id>http://ijiaober.github.io/2014/08/05/hexo/hexo-05/</id>
    <published>2014-08-05T07:25:33.000Z</published>
    <updated>2014-08-05T07:40:44.000Z</updated>
    <content type="html"><![CDATA[<p>在Hexo里，默认的导航菜单只有<code>Home</code>和<code>Archives</code>两项，那么我们怎么来增加其他的导航菜单进去呢？</p>
<p>首先打开主题的配置文件<code>_config.yml</code>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">menu</span>:</div><div class="line">  Home: /</div><div class="line">  Archives: /archives</div><div class="line">  About: /<span class="keyword">about</span></div></pre></td></tr></table></figure>

<p>我们看到的<code>menu:</code>部分是设置菜单的，我们在下面加了一项设置<code>About: /about</code></p>
<p>象上一节设置分类一样，前面部分是名称，后面部分是访问路径，当然名称神马的你可以用中文,访问路径你也可以直接设置到其他站点的任何页面。</p>
<p>我们这个示例里，设置About的访问路径为：/about。</p>
<p>下面我们来建立这个about，运行命令：</p>
<blockquote>
<p>hexo n page ‘about’</p>
</blockquote>
<p>会在source目录里生成一个对应的about目录，该目录下的index.md，就是你访问About时的页面。</p>
]]></content>
    
    
      <category term="hexo" scheme="http://ijiaober.github.io/tags/hexo/"/>
    
      <category term="导航" scheme="http://ijiaober.github.io/tags/%E5%AF%BC%E8%88%AA/"/>
    
      <category term="菜单" scheme="http://ijiaober.github.io/tags/%E8%8F%9C%E5%8D%95/"/>
    
      <category term="Hexo" scheme="http://ijiaober.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo使用攻略：（四）Hexo的分类和标签设置]]></title>
    <link href="http://ijiaober.github.io/2014/08/05/hexo/hexo-04/"/>
    <id>http://ijiaober.github.io/2014/08/05/hexo/hexo-04/</id>
    <published>2014-08-05T03:43:19.000Z</published>
    <updated>2014-08-06T06:26:55.000Z</updated>
    <content type="html"><![CDATA[<p>到这里，我们已经了解了如何配置一个Hexo博客，并且通过</p>
<blockquote>
<p>$ hexo n ‘name’<br>$ hexo g<br>$ hexo s<br>$ hexo d</p>
</blockquote>
<p>几个常见命令来新建、更新、预览、同步你的博客。</p>
<p>这一节，我们来分享一下Hexo里关于分类和标签的设置技巧。</p>
<p><a id="more"></a></p>
<h2 id="新建一个页面">新建一个页面</h2>
<p>首先，我们通过<code>hexo n &quot;name&quot;</code>命令来新建一个页面，在source/_posts目录下找到刚才新建的<code>name.md</code>文件，用记事本或者sublime text打开。</p>
<p>我们看到默认的页面是这样的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: name</div><div class="line">date: 2014-08-05 11:15:00 </div><div class="line"><span class="header">tags: </span></div><div class="line">---</div></pre></td></tr></table></figure>

<p>可以编辑标题、日期、标签和内容，但是没有分类的选项。我们可以手动加入<code>categories:</code>项，或者打开<code>scaffolds/post.md</code>文件，在<code>tages:</code>上面加入<code>categories:</code>,保存后，重新执行<code>hexo n &#39;name&#39;</code>命令，会发现新建的页面里有<code>categories:</code>项了。</p>
<p>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</p>
<h2 id="设置分类列表">设置分类列表</h2>
<p>在我们编辑文章的时候，直接在<code>categories:</code>项填写属于哪个分类，但如果分类是中文的时候，路径也会包含中文。<br>比如分类我们设置的是：</p>
<blockquote>
<p>categories: 编程</p>
</blockquote>
<p>那在生成页面后，分类列表就会出现<code>编程</code>这个选项，他的访问路径是：</p>
<blockquote>
<p>*/categories/编程</p>
</blockquote>
<p>如果我们想要把路径名和分类名分别设置，需要怎么办呢？</p>
<p>打开根目录下的配置文件<code>_config.yml</code>，找到如下位置做更改：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Category & Tag</span></div><div class="line">default_category: uncategorized</div><div class="line"><span class="title">category_map:</span></div><div class="line">	编程: programming</div><div class="line">	生活: life</div><div class="line">	其他: other</div><div class="line"><span class="title">tag_map:</span></div></pre></td></tr></table></figure>

<p>在这里<code>category_map:</code>是设置分类的地方，每行一个分类，冒号前面是分类名称，后面是访问路径。</p>
<p>可以提前在这里设置好一些分类，当编辑的文章填写了对应的分类名时，就会自动的按照对应的路径来访问。</p>
<h2 id="设置标签">设置标签</h2>
<p>在编辑文章的时候，<code>tags:</code>后面是设置标签的地方，如果有多个标签的话，可以用下面两种办法来设置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tages: [标签<span class="number">1</span>,标签<span class="number">2</span>,<span class="keyword">...</span>标签n]</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> tages: </div><div class="line">- 标签<span class="number">1</span></div><div class="line">- 标签<span class="number">2</span></div><div class="line"><span class="keyword">...</span></div><div class="line">- 标签n</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>到这里，我们已经了解了如何配置一个Hexo博客，并且通过</p>
<blockquote>
<p>$ hexo n ‘name’<br>$ hexo g<br>$ hexo s<br>$ hexo d</p>
</blockquote>
<p>几个常见命令来新建、更新、预览、同步你的博客。</p>
<p>这一节，我们来分享一下Hexo里关于分类和标签的设置技巧。</p>
<p>]]></summary>
    
      <category term="hexo" scheme="http://ijiaober.github.io/tags/hexo/"/>
    
      <category term="分类" scheme="http://ijiaober.github.io/tags/%E5%88%86%E7%B1%BB/"/>
    
      <category term="标签" scheme="http://ijiaober.github.io/tags/%E6%A0%87%E7%AD%BE/"/>
    
      <category term="Hexo" scheme="http://ijiaober.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo使用攻略：（三）Hexo的配置和使用]]></title>
    <link href="http://ijiaober.github.io/2014/08/04/hexo/hexo-03/"/>
    <id>http://ijiaober.github.io/2014/08/04/hexo/hexo-03/</id>
    <published>2014-08-04T08:56:07.000Z</published>
    <updated>2014-08-05T05:46:35.000Z</updated>
    <content type="html"><![CDATA[<p>通过前面的操作，我们已经可以把本地新建的页面通过<code>hexo d</code>更新到GitHub了。<br>下面我们来熟悉一下如何新建、编辑Hexo内容以及常用的一些配置。</p>
<h2 id="基本配置">基本配置</h2>
<p>在Hexo中，有两个配置文件，一个是用来配置整站信息的，位于项目更目录下的<code>_config.yml</code>文件。另外一个是对主题的配置，位于<code>themes</code>目录下你所采用的主题目录里，文件名同样是<code>_config.yml</code>。</p>
<p>首先，我们来看第一个配置文件，整站信息配置：<br><a id="more"></a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># Hexo Configuration</span></div><div class="line"><span class="preprocessor">## Docs: http://hexo.io/docs/configuration.html</span></div><div class="line"><span class="preprocessor">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="preprocessor"># Site 这里的配置，哪项配置反映在哪里，可以参考我的博客</span></div><div class="line"><span class="label">title:</span> GoonX <span class="preprocessor">#站点名，站点左上角</span></div><div class="line"><span class="label">subtitle:</span> 我走的很慢，但我从不后退。 <span class="preprocessor">#副标题，站点左上角</span></div><div class="line"><span class="label">description:</span> GoonX <span class="preprocessor">#给搜索引擎看的，对站点的描述，可以自定义</span></div><div class="line"><span class="label">author:</span> ijiaober <span class="preprocessor">#默认在站点左下角可以看到</span></div><div class="line"><span class="label">email:</span> ijiaober@qq.com <span class="preprocessor">#邮箱</span></div><div class="line"><span class="label">language:</span> <span class="built_in">zh</span>-CN <span class="preprocessor">#语言包设置。</span></div><div class="line"></div><div class="line"><span class="preprocessor"># URL #访问地址等信息设置，可根据需要自己修改。</span></div><div class="line"><span class="preprocessor">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="label">url:</span> http://ijiaober.github.io <span class="preprocessor">#访问域名</span></div><div class="line"><span class="label">root:</span> /</div><div class="line"><span class="label">permalink:</span> :year/:month/:day/:title/ <span class="preprocessor">#具体内容页的存储路径结构</span></div><div class="line"><span class="label">tag_dir:</span> tags <span class="preprocessor">#标签目录名</span></div><div class="line"><span class="label">archive_dir:</span> archives <span class="preprocessor">#归档目录名</span></div><div class="line"><span class="label">category_dir:</span> categories <span class="preprocessor">#分类目录名</span></div><div class="line"></div><div class="line"><span class="preprocessor"># Directory #默认文章和生成目录设置</span></div><div class="line"><span class="label">source_dir:</span> source</div><div class="line"><span class="label">public_dir:</span> public</div><div class="line"></div><div class="line"><span class="preprocessor"># Writing 文章布局、写作格式的定义</span></div><div class="line"><span class="label">new_post_name:</span> :title.md <span class="preprocessor"># File name of new posts</span></div><div class="line"><span class="label">default_layout:</span> post</div><div class="line"><span class="label">auto_spacing:</span> false <span class="preprocessor"># Add spaces between asian characters and western characters</span></div><div class="line"><span class="label">titlecase:</span> false <span class="preprocessor"># Transform title into titlecase</span></div><div class="line"><span class="label">max_open_file:</span> <span class="number">100</span></div><div class="line"><span class="label">filename_case:</span> <span class="number">0</span></div><div class="line"><span class="label">highlight:</span></div><div class="line">  enable: true</div><div class="line">  backtick_code_block: true</div><div class="line">  line_number: true</div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"><span class="preprocessor"># Category & Tag 分类和标签设置</span></div><div class="line"><span class="label">default_category:</span> uncategorized</div><div class="line"><span class="label">category_map:</span></div><div class="line"><span class="label">tag_map:</span></div><div class="line"></div><div class="line"><span class="preprocessor"># Archives 默认值为2，如果这里都修改为1，相应页面就只会列出标题，而非全文</span></div><div class="line"><span class="preprocessor">## 2: Enable pagination</span></div><div class="line"><span class="preprocessor">## 1: Disable pagination</span></div><div class="line"><span class="preprocessor">## 0: Fully Disable</span></div><div class="line"><span class="label">archive:</span> <span class="number">1</span></div><div class="line"><span class="label">category:</span> <span class="number">1</span></div><div class="line"><span class="label">tag:</span> <span class="number">1</span></div><div class="line"></div><div class="line"><span class="preprocessor"># Server 本地预览服务信息，默认端口是4000，有需要的话可以自己修改</span></div><div class="line"><span class="preprocessor">## Hexo uses Connect as a server</span></div><div class="line"><span class="preprocessor">## You can customize the logger format as defined in</span></div><div class="line"><span class="preprocessor">## http://www.senchalabs.org/connect/logger.html</span></div><div class="line"><span class="label">port:</span> <span class="number">4000</span></div><div class="line"><span class="label">logger:</span> false</div><div class="line"><span class="label">logger_format:</span></div><div class="line"></div><div class="line"><span class="preprocessor"># Date / Time format 日期格式</span></div><div class="line"><span class="preprocessor">## Hexo uses Moment.js to parse and display date</span></div><div class="line"><span class="preprocessor">## You can customize the date format as defined in</span></div><div class="line"><span class="preprocessor">## http://momentjs.com/docs/#/displaying/format/</span></div><div class="line"><span class="label">date_format:</span> MMM D YYYY</div><div class="line"><span class="label">time_format:</span> H:mm:ss</div><div class="line"></div><div class="line"><span class="preprocessor"># Pagination 每页显示文章数，可以自定义</span></div><div class="line"><span class="preprocessor">## Set per_page to 0 to disable pagination</span></div><div class="line"><span class="label">per_page:</span> <span class="number">5</span></div><div class="line"><span class="label">pagination_dir:</span> page</div><div class="line"></div><div class="line"><span class="preprocessor"># Disqus Disqus 插件，我们会替换成“多说”</span></div><div class="line"><span class="label">disqus_shortname:</span></div><div class="line"></div><div class="line"><span class="preprocessor"># Extensions 这里配置站点所用主题和插件</span></div><div class="line"><span class="preprocessor">## Plugins: https://github.com/hexojs/hexo/wiki/Plugins</span></div><div class="line"><span class="preprocessor">## Themes: https://github.com/hexojs/hexo/wiki/Themes</span></div><div class="line"><span class="label">theme:</span> light</div><div class="line"><span class="label">exclude_generator:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="preprocessor"># Deployment 站点部署到github要配置</span></div><div class="line"><span class="preprocessor">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line"><span class="label">deploy:</span></div><div class="line">  type: github</div><div class="line">  repository: https://github.com/ijiaober/ijiaober.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>

<p> 当你根据自己的需要修改了配置以后，就可以依次使用<code>hexo g</code>和<code>hexo s</code>命令，然后通过<code>localhost:4000</code>来查看效果了。</p>
<p>我们再来看看主题下的配置文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">menu</span>: <span class="string">#右上角导航菜单，冒号前面是菜单名，后面是访问路径。</span></div><div class="line">  <span class="attribute">Home</span>: <span class="string">/</span></div><div class="line">  <span class="attribute">Archives</span>: <span class="string">/archives</span></div><div class="line">  <span class="attribute">About</span>: <span class="string">/about</span></div><div class="line">  </div><div class="line"></div><div class="line"><span class="avrasm"><span class="label">widgets:</span> <span class="preprocessor">#站点右边栏，可以调整顺序和增减内容，会自动调用主题layout/_widget目录下的同名文件。</span></span></div><div class="line">- search</div><div class="line">- category</div><div class="line">- tagcloud</div><div class="line"></div><div class="line"></div><div class="line"><span class="label">excerpt_link:</span> Read More <span class="preprocessor">#列表页里Read more链接名称，可以替换成’查看更多‘等。</span></div><div class="line"></div><div class="line"><span class="label">plugins:</span> </div><div class="line"></div><div class="line"></div><div class="line"><span class="label">twitter:</span> <span class="preprocessor">#右边栏要显示twitter展示的话，需要在此设置</span></div><div class="line">  username: </div><div class="line">  show_replies: false</div><div class="line">  tweet_count: <span class="number">5</span></div><div class="line"></div><div class="line"><span class="label">addthis:</span> <span class="preprocessor">#分享设置</span></div><div class="line">  enable: true</div><div class="line">  pubid:</div><div class="line">  facebook: true</div><div class="line">  twitter: true</div><div class="line">  google: true</div><div class="line">  pinterest: true</div><div class="line"></div><div class="line"><span class="label">fancybox:</span> true <span class="preprocessor">#图片效果，默认</span></div><div class="line"></div><div class="line"><span class="label">google_analytics:</span> <span class="preprocessor">#google_analytics统计ID</span></div><div class="line"><span class="label">rss:</span>  <span class="preprocessor">#生成RSS路径</span></div></pre></td></tr></table></figure>

<h2 id="开始使用">开始使用</h2>
<p>Good job!<br>我们已经完成了Hexo的简单配置，下面就来发布我们第一篇文章吧。</p>
<ol>
<li>在Hexo目录下输入：</li>
</ol>
<blockquote>
<p>hexo n “Hello post” #引号里的是文件名，可以自己定义</p>
</blockquote>
<ol>
<li>在Hexo/source/_posts目录下找到刚才建立的<code>Hllo-post.md</code>文件，可以用sublime text等工具来编辑。</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="label">title:</span> Hello post <span class="preprocessor">#文章标题</span></div><div class="line"><span class="label">date:</span> <span class="number">2014</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">11</span>:<span class="number">15</span>:<span class="number">00</span> <span class="preprocessor">#发表时间</span></div><div class="line"><span class="label">categories:</span> <span class="preprocessor">#分类</span></div><div class="line"><span class="label">tags:</span> <span class="preprocessor">#标签，多个标签时可以用[标签1,标签2]的方式，或者”- 标签“的方式每行一个。</span></div><div class="line">---</div><div class="line"><span class="preprocessor">#这里是正文，用markdown语法写。</span></div></pre></td></tr></table></figure>

<ol>
<li><p>编辑完文章后依次执行<code>hexo g</code>和<code>hexo s</code>,然后访问<code>localhost:4000</code>来预览效果</p>
</li>
<li><p>没有问题了以后，执行<code>hexo d</code>来同步到GitHub。</p>
</li>
</ol>
<p>扩展阅读：<br>关于Hexo的更多命令，可以参阅<a href="http://hexo.io/docs/commands.html" target="_blank" rel="external">commands</a>;<br>关于Hexo的配置说明，可以参阅<a href="http://hexo.io/docs/configuration.html" target="_blank" rel="external">configuration</a>;</p>
]]></content>
    <summary type="html"><![CDATA[<p>通过前面的操作，我们已经可以把本地新建的页面通过<code>hexo d</code>更新到GitHub了。<br>下面我们来熟悉一下如何新建、编辑Hexo内容以及常用的一些配置。</p>
<h2 id="基本配置">基本配置</h2>
<p>在Hexo中，有两个配置文件，一个是用来配置整站信息的，位于项目更目录下的<code>_config.yml</code>文件。另外一个是对主题的配置，位于<code>themes</code>目录下你所采用的主题目录里，文件名同样是<code>_config.yml</code>。</p>
<p>首先，我们来看第一个配置文件，整站信息配置：<br>]]></summary>
    
      <category term="hexo" scheme="http://ijiaober.github.io/tags/hexo/"/>
    
      <category term="Hexo" scheme="http://ijiaober.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo使用攻略：（二）Hexo安装和部署]]></title>
    <link href="http://ijiaober.github.io/2014/08/04/hexo/hexo-02/"/>
    <id>http://ijiaober.github.io/2014/08/04/hexo/hexo-02/</id>
    <published>2014-08-04T03:14:48.000Z</published>
    <updated>2014-08-05T05:46:30.000Z</updated>
    <content type="html"><![CDATA[<p>欢迎阅读<strong>Hexo使用攻略</strong>系列文档，本文档将尽量用简短的文字带领大家快速的上手Hexo。<br>在使用Hexo过程中，如果遇到任何问题，可以查阅官方的<a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">Troubleshooting</a>或者直接去<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>提问。</p>
<p></p><p class="bg-warning">注意：本系列文章针对的Hexo版本为：2.8.1。其他版本请自行调试。</p><br><a id="more"></a><p></p>
<h2 id="安装">安装</h2>
<p>安装Hexo非常简单，但是在安装之前，你需要具备以下条件：</p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a></li>
</ul>
<p>如果你的电脑已经具备了上面的两个条件，那么你只需要用<code>npm</code>来安装Hexo就可以了：</p>
<blockquote>
<p>$ npm install -g hexo</p>
</blockquote>
<p>如果没有，请按照下面的说明来安装需求：</p>
<h2 id="安装Git">安装Git</h2>
<ul>
<li>Windows: 下载安装 <a href="http://code.google.com/p/msysgit/" target="_blank" rel="external">msysgit</a>.</li>
<li>Mac: 通过 <a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="external">MacPorts</a> 或 <a href="http://code.google.com/p/git-osx-installer/" target="_blank" rel="external">installer</a> 来安装.</li>
<li>Linux (Ubuntu, Debian): <code>sudo apt-get install git-core</code></li>
<li>Linux (Fedora, Red Hat, CentOS): <code>sudo yum install git-core</code></li>
</ul>
<h2 id="安装Node-js">安装Node.js</h2>
<p>你可以根据自己的系统在<a href="http://nodejs.org/" target="_blank" rel="external">这里</a>下载安装。</p>
<h2 id="安装Hexo">安装Hexo</h2>
<p>当你具备了上面的条件后，就可以通过<code>npm</code>来安装Hexo了：</p>
<blockquote>
<p>$ npm install -g hexo</p>
</blockquote>
<h2 id="创建Hexo项目">创建Hexo项目</h2>
<p>按照上面的方法安装完以后，就可以开始建立自己的Hexo博客了，首先我们可以新建一个目录，然后在该目录下执行以下命令：</p>
<blockquote>
<p>$ hexo init</p>
</blockquote>
<p>Hexo会自动在这个目录下建立需要的文件夹和文件。</p>
<p>你也可以通过这样的方式来建立你的目录：</p>
<blockquote>
<p>$ hexo init folder</p>
</blockquote>
<p>在初始化目录之后，我们需要在该目录下安装依赖包：</p>
<blockquote>
<p>$ npm install</p>
</blockquote>
<p>全部完成之后，你的目录看起来是这样的结构：</p>
<p><img src="/img/850F81DA-D7F2-4DCF-8C0C-C1D530DDF86B.png" alt=""></p>
<h2 id="本地预览">本地预览</h2>
<p>现在我们已经在本地安装好Hexo了，在我们刚刚建立的Hexo目录下执行下面的命令来生成你的静态页面和资源文件:</p>
<blockquote>
<p>$ hexo g</p>
</blockquote>
<p>然后继续运行：</p>
<blockquote>
<p>$ hexo s</p>
</blockquote>
<p>现在我们打开浏览器，输入<code>localhost:4000</code>访问，就能够看到你的页面了。</p>
<h2 id="部署到GitHub">部署到GitHub</h2>
<p>关于<a href="https://github.com" target="_blank" rel="external">GitHub</a>的注册，很简单，这里就不做介绍了。<br>登录你的GitHub账户，在主页的右下角点击<code>New Repository</code>,然后填写你的github帐号为前缀的地址比如<code>ijiaober.github.io</code></p>
<p>编辑你的Hexo目录下的<code>_config.yml</code>文件（替换成你自己的信息）：</p>
<blockquote>
<p>deploy:<br>  type: github<br>  repository: <a href="https://github.com/ijiaober/ijiaober.github.io.git" target="_blank" rel="external">https://github.com/ijiaober/ijiaober.github.io.git</a><br>  branch: master</p>
</blockquote>
<p>保存后依次执行下面命令重新生成文件完成部署：</p>
<blockquote>
<p>$ hexo g<br>$ hexo d</p>
</blockquote>
<p>OK! 我们已经完成了部署，可以通过<code>goonx.github.io</code>来访问你的页面了！<br>（刚刚部署后马上访问可能会出现404错误，不用担心，大约十分钟左右后就可以访问了。）</p>
]]></content>
    <summary type="html"><![CDATA[<p>欢迎阅读<strong>Hexo使用攻略</strong>系列文档，本文档将尽量用简短的文字带领大家快速的上手Hexo。<br>在使用Hexo过程中，如果遇到任何问题，可以查阅官方的<a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">Troubleshooting</a>或者直接去<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>提问。</p>
<p></p><p class="bg-warning">注意：本系列文章针对的Hexo版本为：2.8.1。其他版本请自行调试。</p><br>]]></summary>
    
      <category term="hexo" scheme="http://ijiaober.github.io/tags/hexo/"/>
    
      <category term="Hexo" scheme="http://ijiaober.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo使用攻略：（一）Hexo简介]]></title>
    <link href="http://ijiaober.github.io/2014/08/02/hexo/hexo-index/"/>
    <id>http://ijiaober.github.io/2014/08/02/hexo/hexo-index/</id>
    <published>2014-08-02T07:32:11.000Z</published>
    <updated>2014-08-05T05:46:24.000Z</updated>
    <content type="html"><![CDATA[<p>你可能需要一个方便的工具来记录思想、整理笔记、表述观点，并且传播给更多的人。Hexo就是一个不错的工具。<br>Hexo,是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。<br>引用官方的话，hexo：</p>
<blockquote>
<p>快速、简单且功能强大的 Node.js 博客框架。<br>A fast, simple &amp; powerful blog framework, powered by Node.js.  </p>
</blockquote>
<p>我们可以用hexo创建自己的博客，托管到github或Heroku上，绑定自己的域名，用markdown写文章。本博客即使用hexo创建并托管在github上。<br><a id="more"></a></p>
<h1 id="为什么要用Hexo">为什么要用Hexo</h1>
<blockquote>
<p>不可思议的快速 ─ 只要一眨眼静态文件即生成完成<br>支持 Markdown<br>仅需一道指令即可部署到 GitHub Pages 和 Heroku<br>已移植 Octopress 插件<br>高扩展性、自订性<br>兼容于 Windows, Mac &amp; Linux</p>
</blockquote>
<h1 id="谁能使用Hexo">谁能使用Hexo</h1>
<p>这是一个免费开源的博客程序，任何人都可以使用和修改。但是不同于wordpress，hexo由于需要使用Github,Git,Markdown,Node.js这样的工具，好多插件、widget都需要自己安装、设置。所以适合那些有一定计算机基础，喜欢折腾的人。但是，不要担心，只要跟着本教程走，就能很方便地让你熟练的使用起来。</p>
]]></content>
    <summary type="html"><![CDATA[<p>你可能需要一个方便的工具来记录思想、整理笔记、表述观点，并且传播给更多的人。Hexo就是一个不错的工具。<br>Hexo,是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。<br>引用官方的话，hexo：</p>
<blockquote>
<p>快速、简单且功能强大的 Node.js 博客框架。<br>A fast, simple &amp; powerful blog framework, powered by Node.js.  </p>
</blockquote>
<p>我们可以用hexo创建自己的博客，托管到github或Heroku上，绑定自己的域名，用markdown写文章。本博客即使用hexo创建并托管在github上。<br>]]></summary>
    
      <category term="hexo" scheme="http://ijiaober.github.io/tags/hexo/"/>
    
      <category term="Hexo" scheme="http://ijiaober.github.io/categories/hexo/"/>
    
  </entry>
  
</feed>
